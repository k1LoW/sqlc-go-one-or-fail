// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package gen

import (
	"context"
	"database/sql"
	"fmt"
)

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO authors (
  name, bio
) VALUES (
  ?, ?
)
RETURNING id, name, bio
`

type CreateAuthorParams struct {
	Name string
	Bio  sql.NullString
}

func (q *Queries) CreateAuthor(ctx context.Context, db DBTX, arg CreateAuthorParams) (Author, error) {
	rows, err := db.QueryContext(ctx, createAuthor, arg.Name, arg.Bio)
	if err != nil {
		return Author{}, err
	}
	defer rows.Close()
	if !rows.Next() {
		if err := rows.Err(); err != nil {
			return Author{}, err
		}
		return Author{}, sql.ErrNoRows
	}
	var i Author
	if err := rows.Scan(&i.ID, &i.Name, &i.Bio); err != nil {
		return Author{}, err
	}
	if rows.Next() {
		return Author{}, fmt.Errorf("multiple records were retrieved when the following query was executed: %q", createAuthor)
	}
	if err := rows.Close(); err != nil {
		return Author{}, err
	}
	if err := rows.Err(); err != nil {
		return Author{}, err
	}
	return i, err

}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM authors
WHERE id = ?
`

func (q *Queries) DeleteAuthor(ctx context.Context, db DBTX, id int64) error {
	_, err := db.ExecContext(ctx, deleteAuthor, id)
	return err
}

const getAuthor = `-- name: GetAuthor :one
SELECT id, name, bio FROM authors
WHERE id = ?
`

func (q *Queries) GetAuthor(ctx context.Context, db DBTX, id int64) (Author, error) {
	rows, err := db.QueryContext(ctx, getAuthor, id)
	if err != nil {
		return Author{}, err
	}
	defer rows.Close()
	if !rows.Next() {
		if err := rows.Err(); err != nil {
			return Author{}, err
		}
		return Author{}, sql.ErrNoRows
	}
	var i Author
	if err := rows.Scan(&i.ID, &i.Name, &i.Bio); err != nil {
		return Author{}, err
	}
	if rows.Next() {
		return Author{}, fmt.Errorf("multiple records were retrieved when the following query was executed: %q", getAuthor)
	}
	if err := rows.Close(); err != nil {
		return Author{}, err
	}
	if err := rows.Err(); err != nil {
		return Author{}, err
	}
	return i, err

}

const getAuthorByName = `-- name: GetAuthorByName :one
SELECT id, name, bio FROM authors
WHERE name = ?
`

func (q *Queries) GetAuthorByName(ctx context.Context, db DBTX, name string) (Author, error) {
	rows, err := db.QueryContext(ctx, getAuthorByName, name)
	if err != nil {
		return Author{}, err
	}
	defer rows.Close()
	if !rows.Next() {
		if err := rows.Err(); err != nil {
			return Author{}, err
		}
		return Author{}, sql.ErrNoRows
	}
	var i Author
	if err := rows.Scan(&i.ID, &i.Name, &i.Bio); err != nil {
		return Author{}, err
	}
	if rows.Next() {
		return Author{}, fmt.Errorf("multiple records were retrieved when the following query was executed: %q", getAuthorByName)
	}
	if err := rows.Close(); err != nil {
		return Author{}, err
	}
	if err := rows.Err(); err != nil {
		return Author{}, err
	}
	return i, err

}

const getAuthorName = `-- name: GetAuthorName :one
SELECT name FROM authors
WHERE id = ?
`

func (q *Queries) GetAuthorName(ctx context.Context, db DBTX, id int64) (string, error) {
	rows, err := db.QueryContext(ctx, getAuthorName, id)
	if err != nil {
		return "", err
	}
	defer rows.Close()
	if !rows.Next() {
		if err := rows.Err(); err != nil {
			return "", err
		}
		return "", sql.ErrNoRows
	}
	var name string
	if err := rows.Scan(&name); err != nil {
		return "", err
	}
	if rows.Next() {
		return "", fmt.Errorf("multiple records were retrieved when the following query was executed: %q", getAuthorName)
	}
	if err := rows.Close(); err != nil {
		return "", err
	}
	if err := rows.Err(); err != nil {
		return "", err
	}
	return name, err

}

const getAuthorNameAndBio = `-- name: GetAuthorNameAndBio :one
SELECT name, bio FROM authors
WHERE id = ?
`

type GetAuthorNameAndBioRow struct {
	Name string
	Bio  sql.NullString
}

func (q *Queries) GetAuthorNameAndBio(ctx context.Context, db DBTX, id int64) (GetAuthorNameAndBioRow, error) {
	rows, err := db.QueryContext(ctx, getAuthorNameAndBio, id)
	if err != nil {
		return GetAuthorNameAndBioRow{}, err
	}
	defer rows.Close()
	if !rows.Next() {
		if err := rows.Err(); err != nil {
			return GetAuthorNameAndBioRow{}, err
		}
		return GetAuthorNameAndBioRow{}, sql.ErrNoRows
	}
	var i GetAuthorNameAndBioRow
	if err := rows.Scan(&i.Name, &i.Bio); err != nil {
		return GetAuthorNameAndBioRow{}, err
	}
	if rows.Next() {
		return GetAuthorNameAndBioRow{}, fmt.Errorf("multiple records were retrieved when the following query was executed: %q", getAuthorNameAndBio)
	}
	if err := rows.Close(); err != nil {
		return GetAuthorNameAndBioRow{}, err
	}
	if err := rows.Err(); err != nil {
		return GetAuthorNameAndBioRow{}, err
	}
	return i, err

}

const listAuthors = `-- name: ListAuthors :many
SELECT id, name, bio FROM authors
ORDER BY name
`

func (q *Queries) ListAuthors(ctx context.Context, db DBTX) ([]Author, error) {
	rows, err := db.QueryContext(ctx, listAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.ID, &i.Name, &i.Bio); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
